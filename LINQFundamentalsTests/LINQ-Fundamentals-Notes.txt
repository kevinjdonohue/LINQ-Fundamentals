Motivation:  Make data access easier in .NET languages.

"Integrating data queries into C# has been a goal for years"

Data Impedance Mismatch
===================================

Typical data access challenges:

1.  Different data types
2.  Different data sources
3.  Relationships vs. Hierarchies (ex. relational data vs. XML data)
4.  Limited Intellisense, syntax, language, etc. support for data access

Manipulating Data
===================================

Problem:
The data source generally determines the API and the tools to use:

Object Data:

Generics
Algorithms

Relational Data:

ADO.NET
SQL

XML Data:

XmlDocument
XPATH / XSLT

Solution:
LINQ - Language Integrated Query - provides general-purpose query facilities for all types of data



Digging Into C# Features for LINQ
===================================

topics:

Extension Methods
Lambda Expressions
Expression Trees
Query Expressions
Type Inference
Anonymous Types
Partial Methods


2 ways to write LINQ queries:

1.  LINQ comprehension
2.  Extension or Lambda expression


Extension Methods - add what appear to be "new" instance methods on an existing type

Must be defined in a static class - ex. StringExtensions.cs

Namespace must be in scope in order for the extension methods to work

System.Linq defines extension methods for IEnumerable<T> and IQueryable<T>

These include the standard query operators such as:  Select, OrderBy, Where, etc.

HISTORY:

Early on in C# you would have written a named method called a predicate in order to create functionality to be invoked to say find a string in a list.

Then, later, (C# 2.0?) you would create that same bit of functionality but in a delegate in line, instead of a predicate named method.

Starting in C# 3.0 Lambda expressions were introduced -- which are really just anonymous methods in a compact syntax.

GUIDELINES:

Parentheses and Types are optional (mostly) in the signature of a lambda expression

No parentheses if there is only one parameter

You can use the curly braces if you would like, to do things like create local variables, etc. -- but remember spirit of lambda is short expressions

INVOKING LAMBDA EXPRESSIONS:

Lambdas are just delegates -- typically use one of two built in delegate types:

Func and Action - rarely will you ever need to define a custom delegate

Action - delegates that don't return anything

Func - delegates that return values

Expression - provides an Expression Tree for a given Func (delegate) - can be compiled to Func or method

Expressions use the same syntax - so you don't have to change anything to use either a Func (delegate) or an Expression

In-Memory LINQ vs. Remote LINQ (say LINQ to SQL):

In-Memory - IEnumerable<T> - take delegates - Func

Remote - IQueryable<T> - take expressions - Expression

In order to understand the functions that are available, see:

Enumerable

and

Queryable

LINQ comprehension queries
===========================

Puts the language integrated into LINQ
Begins with a from clause, ends with a select or group (from, let, where, orderby, join)
Looks like a SQL query (from logically comes first) - helps with intellisense

ex.

string[] cities = { "Boston", "Los Angeles", "Seattle", "London", "Hyderabad" };

IEnumerable<string> filteredCities = 
  from city in cities
  where city.StartsWith("L") && city.Length < 15
  orderby city
  select city;





